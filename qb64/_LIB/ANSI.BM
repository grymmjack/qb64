''
' ANSI LIB
'
' Support for ANSI.SYS and extended codes for the terminal.
' 
' FUNCTION               NOTES
' ansi_home$             Moves the cursor to the home position (0,0)
' ansi_locate$           Moves the cursor to the desired column and row
' ansi_move_up$          Moves the cursor up n lines
' ansi_move_down$        Moves the cursor down n lines
' ansi_move_right$       Moves the cursor right n lines
' ansi_move_left$        Moves the cursor left n lines
' ansi_move_lines_down$  Moves cursor to beginning of next line, n lines down
' ansi_move_lines_up$    Moves cursor to beginning of next line, n lines up
' ansi_move_column$      Moves the cursor to column position n
' ansi_move_line_up$     Moves the cursor one one line up, scrolling if needed
' ansi_save_pos$         Save the cursor position
' ansi_restore_pos$      Restore the cursor position
' ansi_fg_256$           Sets the text foreground color using 8-bit 256 colors.
' ansi_bg_256$           Sets the text background color using 8-bit 256 colors.
'
' @author Rick Christy <grymmjack@gmail.com>
' @depends ANSI.BI
' @see https://gist.github.com/grymmjack/9dae29a60ea65f086d0b35df96fe2291
'


''
' Moves the cursor to the home position (0,0)
'
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_home$ ()
    out$ = CHR$(ESC) + "[H"
    ansi_home$ = out$
END FUNCTION


''
' Moves the cursor to the desired column and row
' @param col% Column to move the cursor to
' @param row% Row to move the cursor to
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_locate$ (col%, row%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(row%)) + ";"
    out$ = out$ + _TRIM$(STR$(col%))
    out$ = out$ + "H"
    ansi_locate$ = out$
END FUNCTION


''
' Moves the cursor up n lines
' @param n% Number of lines to move the cursor up
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_up$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "A"
    ansi_move_up$ = out$
END FUNCTION


''
' Moves the cursor down n lines
' @param n% Number of lines to move the cursor down
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_down$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "B"
    ansi_move_down$ = out$
END FUNCTION


''
' Moves the cursor right n lines
' @param n% Number of lines to move the cursor right
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_right$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "C"
    ansi_move_right$ = out$
END FUNCTION


''
' Moves the cursor left n lines
' @param n% Number of lines to move the cursor left
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_left$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "D"
    ansi_move_left$ = out$
END FUNCTION


''
' Moves the cursor to beginning of next line, n lines down
' @param n% Number of lines to move the cursor down
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_lines_down$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "E"
    ansi_move_lines_down$ = out$
END FUNCTION


''
' Moves the cursor to beginning of previous line, n lines up
' @param n% Number of lines to move the cursor up
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_lines_up$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "F"
    ansi_move_lines_up$ = out$
END FUNCTION


''
' Moves the cursor to column position n
' @param n% Column to move the cursor to
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_column$ (n%)
    out$ = CHR$(ESC) + "["
    out$ = out$ + _TRIM$(STR$(n%))
    out$ = out$ + "G"
    ansi_move_column$ = out$
END FUNCTION


''
' Moves the cursor one one line up, scrolling if needed
' @return string with ANSI escape codes to move the cursor
FUNCTION ansi_move_line_up$ ()
    out$ = CHR$(ESC)
    out$ = out$ + "M"
    ansi_move_line_up$ = out$
END FUNCTION


''
' Save cursor position
' @return void
FUNCTION ansi_save_pos$ ()
    SHARED ansi_x%
    SHARED ansi_y%
    out$ = CHR$(ESC) + "["
    out$ = out$ + "s"
    ansi_x% = POS(0)
    ansi_y% = CSRLIN
    ansi_save_pos$ = out$
END FUNCTION


''
' Restore cursor position
' @return void
FUNCTION ansi_restore_pos$ ()
    SHARED ansi_x%
    SHARED ansi_y%
    out$ = CHR$(ESC) + "["
    out$ = out$ + "u"
    ansi_x% = POS(0)
    ansi_y% = CSRLIN
    ansi_restore_pos$ = out$
END FUNCTION


''
' Sets the console text color foreground using RGB 8-bit mode (256 colors)
'
' @param r% Red value 0-255
' @param g% Green value 0-255
' @param b% Blue value 0-255
' @return string with ANSI escape codes for setting the color
'
FUNCTION ansi_fg_256$ (r%, g%, b%)
    out$ = CHR$(ESC) + "[38;2"
    out$ = out$ + ";" + _TRIM$(STR$(r%))
    out$ = out$ + ";" + _TRIM$(STR$(g%))
    out$ = out$ + ";" + _TRIM$(STR$(b%))
    out$ = out$ + "m"
    ansi_fg_256$ = out$
END FUNCTION


''
' Sets the console text color background using RGB 8-bit mode (256 colors)
'
' @param r% Red value 0-255
' @param g% Green value 0-255
' @param b% Blue value 0-255
' @return string with ANSI escape codes for setting the color
'
FUNCTION ansi_bg_256$ (r%, g%, b%)
    out$ = CHR$(ESC) + "[48;2"
    out$ = out$ + ";" + _TRIM$(STR$(r%))
    out$ = out$ + ";" + _TRIM$(STR$(g%))
    out$ = out$ + ";" + _TRIM$(STR$(b%))
    out$ = out$ + "m"
    ansi_bg_256$ = out$
END FUNCTION