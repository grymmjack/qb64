SUB timers_init
    DPRINT "timers_init", DEBUG_AVG
    TICKS_TIMER.STARTED#   = TIMER
    TICKS_TIMER.TICKS&     = 0
    TICKS_TIMER.SECONDS&   = 0
    TIMER_LAPS(0).STARTED# = TICKS_TIMER.STARTED#
    TICKS_TIMER.LAP_COUNT% = 1
    timers_main_startup
END SUB

SUB timers_tick
    DPRINT "timers_tick", DEBUG_MAX
    IF CFG.AUTO_BLOCKS_SECS% > 0 THEN
        IF TICKS_TIMER.TICKS& MOD CFG.AUTO_BLOCKS_SECS% = 0 THEN 
            blocks_init
        END IF
    END IF
    IF CFG.BALL_CHAOS_TIMER% = TRUE THEN
        IF TICKS_TIMER.TICKS& MOD CFG.CHAOS_SECS% = 0 THEN
            DIM AS INTEGER old_x, old_y
            ball_get_9grid
            IF ball_will_bounce_9grid(BALL.Y%, BALL.X% ) = FALSE THEN
                old_x% = BALL.X% : old_y% = BALL.Y%
                ball_erase old_y%, old_x%
                BALL.X% = BALL.X% + (rand_in_range(1,2) * rand_sign)
                BALL.Y% = BALL.Y% + (rand_in_range(1,2) * rand_sign)
                DIM s AS STRING
                s$ = "***** BALL_CHAOS_TIMER ***** "
                s$ = s$ + "OLD BALL.Y%=" + n$(old_y%)
                s$ = s$ + ", BALL.X%=" + n$(old_x%)
                s$ = s$ + " -> NEW BALL.Y%=" + n$(BALL.Y%)
                s$ = s$ + ", BALL.X%=" + n$(BALL.X%)
                DPRINT s$, DEBUG_AVG
                ball_sound_random
            END IF
        END IF
    END IF
    TICKS_TIMER.TICKS& = TICKS_TIMER.TICKS& + 1
    TICKS_TIMER.SECONDS& = TICKS_TIMER.SECONDS& + 1
END SUB

SUB timers_main_startup
    DPRINT "timers_main_startup", DEBUG_AVG
    MAIN_TIMER% = _FREETIMER
    ON TIMER(MAIN_TIMER%, 1) timers_tick
    TIMER(MAIN_TIMER%) ON
END SUB

SUB timers_main_shutdown
    DPRINT "timers_main_shutdown", DEBUG_AVG
    TIMER(MAIN_TIMER%) OFF
    TIMER(MAIN_TIMER%) FREE
END SUB

SUB timers_start_lap
    DPRINT "timers_start_lap", DEBUG_MAX
END SUB

SUB timers_end_lap
    DPRINT "timers_end_lap", DEBUG_MAX
END SUB
