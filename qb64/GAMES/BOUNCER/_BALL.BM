SUB ball_init
    DPRINT "ball_init", DEBUG_AVG
    BALL.X%          = rand_in_range(LEVEL.START_X%, LEVEL.END_X%)
    BALL.Y%          = rand_in_range(LEVEL.START_Y%, LEVEL.END_Y%)
    BALL.X_DIR%      = 1
    BALL.Y_DIR%      = -1
    BALL.SPEED%      = 1
    BALL.KOLOR%      = 15
    BALL.HIT_90_NUM% = 0
    BALL.TRACE_PATH% = FALSE
    BALL.DISPLAY$    = CHR$(9)
END SUB


SUB ball_toggle_char
    DPRINT "ball_toggle_char", DEBUG_MAX
    IF BALL.DISPLAY$ = BALL_ROUND$ THEN 
        BALL.DISPLAY$ = BALL_SOLID$
    ELSE 
        BALL.DISPLAY$ = BALL_ROUND$
    ENDIF
    screen_set_active_page GAME_SCREEN
    LOCATE BALL.Y%, BALL.X% : PRINT BALL.DISPLAY$;
END SUB


SUB ball_toggle_trace_path
    DPRINT "ball_toggle_trace_path", DEBUG_MAX
    IF BALL.TRACE_PATH% = TRUE THEN 
        BALL.TRACE_PATH% = FALSE
        ball_clear_traces
    ELSE
        BALL.TRACE_PATH% = TRUE
    END IF
END SUB


SUB ball_clear_traces
    DPRINT "ball_clear_traces", DEBUG_MAX
    DIM AS INTEGER y, x, c
    FOR y% = LEVEL.START_Y% TO LEVEL.END_Y%
        FOR x% = LEVEL.START_X TO LEVEL.END_X%
            c% = SCREEN(y%, x%)
            IF c% = 249 THEN
                screen_set_both_pages GAME_SCREEN
                LOCATE y%, x% : PRINT " ";
            END IF
        NEXT x%
    NEXT y%
END SUB


SUB ball_get_9grid
    DPRINT "ball_get_9grid", DEBUG_AVG 
    DIM AS INTEGER x, y, grid_x, grid_y, char
    FOR y%=1 TO 3
        grid_y% = clamp(BALL.Y%-2 + y%, LEVEL.START_Y%, LEVEL.END_Y%)
        FOR x% = 1 TO 3
            grid_x% = clamp(BALL.X%-2 + x%, LEVEL.START_X%, LEVEL.END_X%)
            screen_set_active_page GAME_SCREEN
            char% = SCREEN(grid_y%, grid_x%)
            IF char% <> ASC(BALL.DISPLAY$) THEN 
                SELECT CASE char%
                    CASE ASC(BLOCK.DISPLAY$):
                        BALL_9GRID(y%, x%) = 1
                    CASE ELSE:
                        BALL_9GRID(y%, x%) = 0
                END SELECT
            END IF
        NEXT x%
    NEXT y%
    IF DEBUG.ENABLED% = TRUE AND DEBUG.VERBOSITY% >= DEBUG_AVG THEN ball_dump_9grid
END SUB


SUB ball_dump_9grid
    DPRINT "ball_dump_9grid", DEBUG_AVG
    DIM AS INTEGER y, x
    DIM s AS STRING
    DPRINT "", DEBUG_AVG
    DPRINT "BALL_9GRID(" + n$(y%) + ", " + n$(x%) + ") {", DEBUG_AVG
    FOR y% = 1 TO 3
        s$ = "    "
        FOR x% = 1 TO 3
            s$ = s$ + n$(BALL_9GRID(y%, x%)) + " "
        NEXT x%
        DPRINT s$, DEBUG_AVG
    NEXT y%
    DPRINT "}", DEBUG_AVG
END SUB


FUNCTION ball_will_bounce_9grid% (y%, x%)
    DPRINT "ball_will_bounce_9grid (" + _
        "y%=" + n$(y%) + ", x%=" + n$(x%) + ")", DEBUG_MAX
    DIM AS INTEGER check_y, check_x, checks_sum
    checks_sum% = 0
    FOR check_y% = 1 TO 3
        FOR check_x% = 1 TO 3
            checks_sum% = checks_sum% + BALL_9GRID(check_y%, check_x%)
        NEXT check_x%
    NEXT check_y%
    IF checks_sum% > 0 THEN
        ball_will_bounce_9grid% = TRUE
    ELSE
        ball_will_bounce_9grid% = FALSE
    END IF
END FUNCTION


FUNCTION ball_will_invert_path% ()
    DPRINT "ball_will_invert_path()", DEBUG_AVG
    DIM AS INTEGER top_left, top_right, bot_left, bot_right, sum
    '_3L = 3 L shape neighbors _2L = partial L shape neighbors (2 but not 3)
    DIM AS INTEGER top_left_2L, top_right_2L, bot_left_2L, bot_right_2L
    DIM AS INTEGER top_left_3L, top_right_3L, bot_left_3L, bot_right_3L
    DIM AS INTEGER top_left_4L, top_right_4L, bot_left_4L, bot_right_4L
    DIM AS INTEGER top_left_5L, top_right_5L, bot_left_5L, bot_right_5L

    'x..
    '.*.
    '...\ = x-1 y-1
    top_left% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '..x
    '.*.
    '.../ = x+1 y-1
    top_right% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '...
    '.*.
    'x../ = x-1 y+1
    bot_left% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '...
    '.*.
    '..x\ = x+1 y+1
    bot_right% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'xx.
    'x*.
    '...\ = x-1 y-1
    top_left_2L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '.xx
    '.*x
    '.../ = x+1 y-1
    top_right_2L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '...
    'x*.
    'xx./ = x-1 y+1
    bot_left_2L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '...
    '.*x
    '.xx\ = x+1 y+1
    bot_right_2L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'xxx
    'x*.
    'x..\ = x-1 y-1
    top_left_3L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    'xxx
    '.*x
    '..x/ = x+1 y-1
    top_right_3L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'x..
    'x*.
    'xxx/ = x-1 y+1
    bot_left_3L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    '..x
    '.*x
    'xxx\ = x+1 y+1
    bot_right_3L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'xx.
    'x*.
    'x..\ = x-1 y-1
    top_left_4L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '.xx
    '.*x
    '..x/ = x+1 y-1
    top_right_4L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 1) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'x..
    'x*.
    'xx./ = x-1 y+1
    bot_left_4L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    '..x
    '.*x
    '.xx\ = x+1 y+1
    bot_right_4L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 1) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'x.x
    'x*.
    'x..\ = x-1 y-1
    top_left_5L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 0) _
    )
    'x.x
    '.*x
    '..x/ = x+1 y-1
    top_right_5L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 0) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    'x..
    'x*.
    'x.x/ = x-1 y+1
    bot_left_5L% = ( _
            (BALL_9GRID(1,1) = 1) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 0) _
        AND (BALL_9GRID(2,1) = 1) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 0) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    '..x
    '.*x
    'x.x\ = x+1 y+1
    bot_right_5L% = ( _
            (BALL_9GRID(1,1) = 0) _
        AND (BALL_9GRID(1,2) = 0) _
        AND (BALL_9GRID(1,3) = 1) _
        AND (BALL_9GRID(2,1) = 0) _
        AND (BALL_9GRID(2,2) = 0) _
        AND (BALL_9GRID(2,3) = 1) _
        AND (BALL_9GRID(3,1) = 1) _
        AND (BALL_9GRID(3,2) = 0) _
        AND (BALL_9GRID(3,3) = 1) _
    )
    sum% = 0
    DIM AS INTEGER will_corner, will_2L, will_3L, will_4L, will_5L, will_invert
    will_corner% = FALSE
    will_2L% = FALSE : will_3L% = FALSE : will_4L% = FALSE : will_5L% = FALSE
    will_invert% = FALSE
    IF top_left%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = -1 THEN 
        sum% = sum% + 1 : will_corner% = TRUE
    END IF
    IF top_right% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = -1 THEN 
        sum% = sum% + 1 : will_corner% = TRUE
    END IF
    IF bot_left%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = 1 THEN 
        sum% = sum% + 1 : will_corner% = TRUE
    END IF
    IF bot_right% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = 1 THEN 
        sum% = sum% + 1 : will_corner% = TRUE
    END IF
    IF top_left_2L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_2L% = TRUE
    END IF
    IF top_right_2L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_2L% = TRUE
    END IF
    IF bot_left_2L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_2L% = TRUE
    END IF
    IF bot_right_2L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_2L% = TRUE
    END IF
    IF top_left_3L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_3L% = TRUE
    END IF
    IF top_right_3L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_3L% = TRUE
    END IF
    IF bot_left_3L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_3L% = TRUE
    END IF
    IF bot_right_3L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_3L% = TRUE
    END IF
    IF top_left_4L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_4L% = TRUE
    END IF
    IF top_right_4L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_4L% = TRUE
    END IF
    IF bot_left_4L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_4L% = TRUE
    END IF
    IF bot_right_4L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_4L% = TRUE
    END IF
    IF top_left_5L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_5L% = TRUE
    END IF
    IF top_right_5L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = -1 THEN
        sum% = sum% + 1 : will_5L% = TRUE
    END IF
    IF bot_left_5L%  = TRUE AND BALL.X_DIR% = -1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_5L% = TRUE
    END IF
    IF bot_right_5L% = TRUE AND BALL.X_DIR% = 1 AND BALL.Y_DIR% = 1 THEN
        sum% = sum% + 1 : will_5L% = TRUE
    END IF
    IF sum% > 0 THEN will_invert% = TRUE
    DPRINT "    top_left%=" + b$(top_left%), DEBUG_WTF
    DPRINT "   top_right%=" + b$(top_right%), DEBUG_WTF
    DPRINT "    bot_left%=" + b$(bot_left%), DEBUG_WTF
    DPRINT "   bot_right%=" + b$(bot_right%), DEBUG_WTF
    DPRINT " top_left_2L%=" + b$(top_left_2L%), DEBUG_WTF
    DPRINT "top_right_2L%=" + b$(top_right_2L%), DEBUG_WTF
    DPRINT " bot_left_2L%=" + b$(bot_left_2L%), DEBUG_WTF
    DPRINT "bot_right_2L%=" + b$(bot_right_2L%), DEBUG_WTF
    DPRINT " top_left_3L%=" + b$(top_left_3L%), DEBUG_WTF
    DPRINT "top_right_3L%=" + b$(top_right_3L%), DEBUG_WTF
    DPRINT " bot_left_3L%=" + b$(bot_left_3L%), DEBUG_WTF
    DPRINT "bot_right_3L%=" + b$(bot_right_3L%), DEBUG_WTF
    DPRINT " top_left_4L%=" + b$(top_left_4L%), DEBUG_WTF
    DPRINT "top_right_4L%=" + b$(top_right_4L%), DEBUG_WTF
    DPRINT " bot_left_4L%=" + b$(bot_left_4L%), DEBUG_WTF
    DPRINT "bot_right_4L%=" + b$(bot_right_4L%), DEBUG_WTF
    DPRINT " top_left_5L%=" + b$(top_left_5L%), DEBUG_WTF
    DPRINT "top_right_5L%=" + b$(top_right_5L%), DEBUG_WTF
    DPRINT " bot_left_5L%=" + b$(bot_left_5L%), DEBUG_WTF
    DPRINT "bot_right_5L%=" + b$(bot_right_5L%), DEBUG_WTF
    DPRINT "-------------", DEBUG_WTF
    DPRINT " sum: " + n$(sum%), DEBUG_WTF
    DPRINT "-------------", DEBUG_WTF
    DPRINT " will invert%=" + b$(will_invert%), DEBUG_WTF
    DPRINT " will_corner%=" + b$(will_corner%), DEBUG_WTF
    DPRINT "     will_2L%=" + b$(will_2L%), DEBUG_WTF
    DPRINT "     will_3L%=" + b$(will_3L%), DEBUG_WTF
    DPRINT "     will_4L%=" + b$(will_4L%), DEBUG_WTF
    DPRINT "     will_5L%=" + b$(will_5L%), DEBUG_WTF
    IF sum% > 0 THEN
        DPRINT "ball_will_invert_path = TRUE", DEBUG_WTF
        ball_sound_invert
        ball_will_invert_path% = TRUE
    ELSE
        DPRINT "ball_will_invert_path = FALSE", DEBUG_WTF
        ball_will_invert_path% = FALSE
    END IF
END FUNCTION


FUNCTION ball_will_bounce_left% ()
    DPRINT "ball_will_bounce_left()", DEBUG_AVG
    '..x
    '.*x
    '..x
    IF BALL_9GRID(1,3) _
     + BALL_9GRID(2,3) _
     + BALL_9GRID(3,3) >= 2 _
    THEN 
        DPRINT "ball_will_bounce_left = TRUE", DEBUG_AVG
        BALL.HIT_90_NUM% = 0
        ball_will_bounce_left% = TRUE
    ELSE
        DPRINT "ball_will_bounce_left = FALSE", DEBUG_AVG
        ball_will_bounce_left% = FALSE
    END IF
END FUNCTION


FUNCTION ball_will_bounce_right% ()
    DPRINT "ball_will_bounce_right()", DEBUG_AVG
    'x..
    'x*.
    'x..
    IF BALL_9GRID(1,1) _
     + BALL_9GRID(2,1) _
     + BALL_9GRID(3,1) >= 2 _
    THEN 
        DPRINT "ball_will_bounce_right = TRUE", DEBUG_AVG
        BALL.HIT_90_NUM% = 0
        ball_will_bounce_right% = TRUE
    ELSE
        DPRINT "ball_will_bounce_right = FALSE", DEBUG_AVG
        ball_will_bounce_right% = FALSE
    END IF
END FUNCTION


FUNCTION ball_will_bounce_down% ()
    DPRINT "ball_will_bounce_down()", DEBUG_AVG
    'xxx
    '.*.
    '...
    IF BALL_9GRID(1,1) _
     + BALL_9GRID(1,2) _
     + BALL_9GRID(1,3) >= 2 _
    THEN 
        DPRINT "ball_will_bounce_down = TRUE", DEBUG_AVG
        BALL.HIT_90_NUM% = 0
        ball_will_bounce_down% = TRUE
    ELSE
        DPRINT "ball_will_bounce_down = FALSE", DEBUG_AVG
        ball_will_bounce_down% = FALSE
    END IF
END FUNCTION


FUNCTION ball_will_bounce_up% ()
    DPRINT "ball_will_bounce_up()", DEBUG_AVG
    '...
    '.*.
    'xxx
    IF BALL_9GRID(3,1) _
     + BALL_9GRID(3,2) _
     + BALL_9GRID(3,3) >= 2 _
    THEN 
        DPRINT "ball_will_bounce_up = TRUE", DEBUG_AVG
        BALL.HIT_90_NUM% = 0
        ball_will_bounce_up% = TRUE
    ELSE
        DPRINT "ball_will_bounce_up = FALSE", DEBUG_AVG
        ball_will_bounce_up% = FALSE
    END IF
END FUNCTION


SUB ball_hit_block
    DPRINT "ball_hit_block", DEBUG_AVG
    DIM AS INTEGER _
        bouncing_up, bouncing_down, _
        bouncing_left, bouncing_right, _
        inverting_path, bouncing
    bouncing%       = FALSE
    bouncing_up%    = ball_will_bounce_up%
    bouncing_down%  = ball_will_bounce_down%
    bouncing_left%  = ball_will_bounce_left%
    bouncing_right% = ball_will_bounce_right%
    inverting_path% = ball_will_invert_path%
    IF inverting_path% = TRUE THEN
        BALL.Y_DIR% = BALL.Y_DIR% * -1
        BALL.X_DIR% = BALL.X_DIR% * -1
        BALL.HIT_90_NUM% = BALL.HIT_90_NUM% + 1
        ball_sound_invert
        bouncing% = TRUE
    ELSEIF bouncing_up% = TRUE THEN 
        BALL.Y_DIR% = -1
        bouncing% = TRUE
    ELSEIF bouncing_down% = TRUE THEN 
        BALL.Y_DIR% = 1
        bouncing% = TRUE
    ELSEIF bouncing_left% = TRUE THEN 
        BALL.X_DIR% = -1
        bouncing% = TRUE
    ELSEIF bouncing_right% = TRUE THEN 
         BALL.X_DIR% = 1
        bouncing% = TRUE
    END IF
    IF bouncing% = TRUE THEN ball_sound_hit_block
END SUB


SUB ball_erase (y%, x%)
    DPRINT "ball_erase", DEBUG_AVG
    screen_set_active_page GAME_SCREEN
    y% = clamp(y%, LEVEL.START_Y%, LEVEL.END_Y%)
    x% = clamp(x%, LEVEL.START_X%, LEVEL.END_X%)
    COLOR BALL.KOLOR%, __SCREEN.BG_KOLOR%
    IF BALL.TRACE_PATH% = FALSE THEN 
        LOCATE y%, x% : PRINT SPACE$(LEN(BALL.DISPLAY$))
    ELSE 
        LOCATE y%, x% : PRINT CHR$(249);
    END IF
END SUB


SUB ball_move
    DPRINT "ball_move", DEBUG_AVG
    ball_erase BALL.Y%, BALL.X%
    ball_get_9grid
    IF (ball_will_bounce_9grid(BALL.Y%, BALL.X%)) THEN
        ball_hit_block
    END IF
    BALL.X% = clamp(BALL.X% + BALL.X_DIR%, LEVEL.START_X%, LEVEL.END_X%)
    BALL.Y% = clamp(BALL.Y% + BALL.Y_DIR%, LEVEL.START_Y%, LEVEL.END_Y%)
    screen_set_active_page GAME_SCREEN
    COLOR BALL.KOLOR%, __SCREEN.BG_KOLOR%
    LOCATE BALL.Y%, BALL.X% : PRINT BALL.DISPLAY$;
END SUB


SUB ball_stay_in_bounds
    DPRINT "ball_stay_in_bounds", DEBUG_AVG
    DIM AS INTEGER new_x, pad
    IF BALL.Y% <= LEVEL.START_Y% THEN 
        ball_bounce_top
    ELSEIF BALL.X% >= LEVEL.END_X% THEN 
        ball_bounce_right
    ELSEIF BALL.Y% >= LEVEL.END_Y% THEN 
        ball_bounce_bot
    ELSEIF BALL.X% <= LEVEL.START_X% THEN 
        ball_bounce_left
    END IF
END SUB


SUB ball_bounce_top
    DPRINT "ball_bounce_top", DEBUG_AVG
    BALL.Y_DIR% = BALL.Y_DIR% * -1
    DIM AS INTEGER new_x
    ball_sound_bounce_top
END SUB


SUB ball_bounce_right   
    DPRINT "ball_bounce_right", DEBUG_AVG
    BALL.X_DIR% = BALL.X_DIR% * -1
    ball_sound_bounce_right
END SUB


SUB ball_bounce_bot
    DPRINT "ball_bounce_bot", DEBUG_AVG
    BALL.Y_DIR% = BALL.Y_DIR% * -1
    ball_sound_bounce_bot
END SUB


SUB ball_bounce_left
    DPRINT "ball_bounce_left", DEBUG_AVG
    BALL.X_DIR% = BALL.X_DIR% * -1
    ball_sound_bounce_left
END SUB


SUB ball_toggle_sound
    DPRINT "ball_toggle_sound", DEBUG_MAX
    IF CFG.SOUND_ENABLED% = TRUE THEN 
        CFG.SOUND_ENABLED% = FALSE
    ELSE
        CFG.SOUND_ENABLED% = TRUE
    END IF
END SUB


SUB ball_sound_random
    DPRINT "ball_sound_random", DEBUG_MAX
    STATS.BALL_RANDOMS% = STATS.BALL_RANDOMS% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    ball_soundfx_random
END SUB

SUB ball_soundfx_random
    SOUND 7500, 0.5
    SOUND 6500, 0.5
    SOUND 5500, 0.5
    SOUND 4500, 0.5
    SOUND 3500, 0.5
    SOUND 2500, 0.5
    SOUND 1500, 0.5
END SUB

SUB ball_sound_bounce_top
    DPRINT "ball_sound_bounce_top", DEBUG_MAX
    STATS.TOP_BOUNCES% = STATS.TOP_BOUNCES% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    SOUND 4000, 0.25
END SUB

SUB ball_sound_bounce_bot
    DPRINT "ball_sound_bounce_bot", DEBUG_MAX
    STATS.BOT_BOUNCES% = STATS.BOT_BOUNCES% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    SOUND 3000, 0.25
END SUB

SUB ball_sound_bounce_left
    DPRINT "ball_sound_bounce_left", DEBUG_MAX
    STATS.LEFT_BOUNCES% = STATS.LEFT_BOUNCES% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    SOUND 1000, 0.25
END SUB

SUB ball_sound_bounce_right
    DPRINT "ball_sound_bounce_right", DEBUG_MAX
    STATS.RIGHT_BOUNCES% = STATS.RIGHT_BOUNCES% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    SOUND 2000, 0.25
END SUB

SUB ball_sound_hit_block
    DPRINT "ball_sound_hit_block", DEBUG_MAX
    STATS.BLOCK_BOUNCES% = STATS.BLOCK_BOUNCES% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    SOUND 500, 0.33
END SUB

SUB ball_sound_invert
    DPRINT "ball_sound_invert", DEBUG_MAX
    STATS.BALL_INVERTS% = STATS.BALL_INVERTS% + 1
    IF CFG.SOUND_ENABLED% = FALSE THEN EXIT SUB
    ball_soundfx_random
END SUB

