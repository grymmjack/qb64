SUB ball_init
    BALL.X%       = _WIDTH \ 2
    BALL.Y%       = _HEIGHT \ 2
    BALL.X_DIR%   = 1
    BALL.Y_DIR%   = -1
    BALL.SPEED%   = 1
    BALL.KOLOR%   = 15
    BALL.DISPLAY$ = CHR$(9)
END SUB


SUB ball_get_9grid
    DIM AS INTEGER x, y, grid_x, grid_y, char
    FOR y%=1 TO 3
        grid_y% = clamp(BALL.Y% + y%, LEVEL.START_Y%, LEVEL.END_Y%)
        FOR x% = 1 TO 3
            grid_x% = clamp(BALL.X% + x%, LEVEL.START_X%, LEVEL.END_X%)
            char% = SCREEN(grid_y%, grid_x%)
            IF char% <> ASC(BALL.DISPLAY$) THEN 
                SELECT CASE char%
                    CASE ASC(BLOCK.DISPLAY$):
                        BALL_9GRID(y%, x%) = 1
                    CASE ELSE:
                        BALL_9GRID(y%, x%) = 0
                END SELECT
            END IF
        NEXT x%
    NEXT y%
END SUB


FUNCTION ball_will_bounce_9grid% (y%, x%)
    DIM AS INTEGER check_y, check_x
    check_y% = BALL.Y% + BALL.Y_DIR%
    check_x% = BALL.X% + BALL.X_DIR%
    ball_will_bounce_9grid% = BALL_9GRID(check_y%, check_x%)
END FUNCTION


FUNCTION ball_will_bounce_left% ()
    '..x
    '.*x
    '..x
    IF BALL_9GRID(1,3) _
     + BALL_9GRID(2,3) _
     + BALL_9GRID(3,3) >= 2 THEN ball_will_bounce_left% = 1
END FUNCTION


FUNCTION ball_will_bounce_right% ()
    'x..
    'x*.
    'x..
    IF BALL_9GRID(1,1) _
     + BALL_9GRID(2,1) _
     + BALL_9GRID(3,1) >= 2 THEN ball_will_bounce_right% = 1
END FUNCTION


FUNCTION ball_will_bounce_down% ()
    'xxx
    '.*.
    '...
    IF BALL_9GRID(1,1) _
     + BALL_9GRID(1,2) _
     + BALL_9GRID(1,3) >= 2 THEN ball_will_bounce_down% = 1
END FUNCTION


FUNCTION ball_will_bounce_up% ()
    '...
    '.*.
    'xxx
    IF BALL_9GRID(3,1) _
     + BALL_9GRID(3,2) _
     + BALL_9GRID(3,3) >= 2 THEN ball_will_bounce_up% = 1
END FUNCTION


SUB ball_hit_block
    DIM AS INTEGER bouncing_up, bouncing_down, bouncing_left, bouncing_right
    STATS.BLOCK_BOUNCES% = STATS.BLOCK_BOUNCES% + 1
    bouncing_up%    = ball_will_bounce_up%
    bouncing_down%  = ball_will_bounce_down%
    bouncing_left%  = ball_will_bounce_left%
    bouncing_right% = ball_will_bounce_right%
    IF bouncing_up% THEN BALL.Y_DIR%    = -1
    IF boucning_down% THEN BALL.Y_DIR%  = 1
    IF bouncing_left% THEN BALL.X_DIR%  = -1
    IF bouncing_right% THEN BALL.X_DIR% = 1
    SOUND 500, 0.33
END SUB


FUNCTION ball_get_collision% ()
    DIM AS INTEGER x, y
    x% = clamp(BALL.X% + BALL.X_DIR%, LEVEL.START_X%, LEVEL.END_X%)
    y% = clamp(BALL.Y% + BALL.Y_DIR%, LEVEL.START_Y%, LEVEL.END_Y%)
    ball_get_collision% = SCREEN(y%, x%)
END FUNCTION


SUB ball_move
    COLOR BALL.KOLOR%, __SCREEN.BG_KOLOR%
    LOCATE BALL.Y%, BALL.X% : PRINT SPACE$(LEN(BALL.DISPLAY$))
    ball_get_9grid
    IF (ball_will_bounce_9grid(BALL.Y%, BALL.X%)) THEN
        ball_hit_block
    END IF
    BALL.X% = clamp(BALL.X% + BALL.X_DIR%, LEVEL.START_X%, LEVEL.END_X%)
    BALL.Y% = clamp(BALL.Y% + BALL.Y_DIR%, LEVEL.START_Y%, LEVEL.END_Y%)
    LOCATE BALL.Y%, BALL.X% : PRINT BALL.DISPLAY$;
END SUB


SUB ball_stay_in_bounds
    IF BALL.Y% = LEVEL.START_Y% THEN 
         ball_bounce_top
    ELSEIF BALL.X% = LEVEL.END_X% THEN 
        ball_bounce_right
    ELSEIF BALL.Y% = LEVEL.END_Y% THEN 
        ball_bounce_bot
    ELSEIF BALL.X% = LEVEL.START_X% THEN 
        ball_bounce_left
    END IF
END SUB


SUB ball_bounce_top
    STATS.TOP_BOUNCES% = STATS.TOP_BOUNCES% + 1
    BALL.Y_DIR% = BALL.Y_DIR% * -1
    SOUND 4000, 0.25
END SUB


SUB ball_bounce_right   
    STATS.RIGHT_BOUNCES% = STATS.RIGHT_BOUNCES% + 1
    BALL.X_DIR% = BALL.X_DIR% * -1
    SOUND 2000, 0.25
END SUB


SUB ball_bounce_bot    
    STATS.BOT_BOUNCES% = STATS.BOT_BOUNCES% + 1
    BALL.Y_DIR% = BALL.Y_DIR% * -1
    SOUND 3000, 0.25
END SUB


SUB ball_bounce_left
    STATS.LEFT_BOUNCES% = STATS.LEFT_BOUNCES% + 1
    BALL.X_DIR% = BALL.X_DIR% * -1
    SOUND 1000, 0.25
END SUB
